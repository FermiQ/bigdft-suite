! This is a wrapper for routines in BigDFT.
! It creates a static library libbigdft.a and
! a .mod file to use it.

module lib_BigDFT

  ! Everything included from BigDFT is private.
  private
  
  ! Except some versioning informations.
  character(len = *), parameter :: bigdft_version = "@PACKAGE_VERSION@"
  character(len = *), parameter :: bigdft_name    = "@PACKAGE_NAME@"
  
  !- High level methods.
  !- Compute the density from the wavefunctions.
  public :: sumrho
  !- Apply the kinetic operator and the local part of potential
  public :: applylocpotkin
  !- Apply the non local part of potential
  public :: applyprojectors
  !- Orthogonalize wavefunctions (scalar and MPI routine)
  public :: orthoconstraint, orthoconstraint_p
  !- Precondition on wavefunctions
  public :: preconditionall
  !- Make some Loewedin orthogonalisations (scalar and MPI).
  public :: loewe, loewe_p
  !- Control orthogonality (scalar and MPI).
  public :: checkortho, checkortho_p
  !- Solve a KS system (compute an hamiltonian, diagonalise it and return eigen vectors)
  public :: solveKS
  
  !- Initialisation methods.
  !- Create a ionic density (without gaussian parts)
  public :: input_rho_ion
  !- Add gaussian part to local part of ionic potential
  public :: addlocgauspsp
  !- Find box size around an atom
  public :: pregion_size
  !- Find relevant coordinates
  public :: fill_logrid
  !- Compute access keys for compress data
  public :: segkeys
  !- Retrive the number of segments and elements
  public :: num_segkeys
  
  !- Wavefunctions related methods.
  !- Create wavefunctions from atomic orbitals
  public :: createAtomicOrbitals
  !- Read a file with description of atomic orbitals for all elements
  public :: readAtomicOrbitals
  !- Read wavefunctions from disk
  public :: readmywaves
  !- Write wavefunctions to disk
  public :: writemywaves
  !- MPI communications for wavefunctions
  public :: commallwaves
  public :: transallwaves
  public :: untransallwaves
  
  !- Projectors methods
  !- Count number of projectors.
  public :: numb_proj
  !- Create one projector
  public :: crtproj
  
  !- localisation methods
  !- Do something on Wannier stuff.
  public :: wannier_par
  !- Get a mask for localised region.
  public :: localizationregion

  !- Geometry method
  !- Get a box that contains all atoms and their active area.
  public :: system_size
  
  !- Linear algebra method
  !- Compute a scalar product
  public :: wnrm

contains

  ! All BigDFT subroutines.
  include "@CONVOLUT_SOURCES@"
  include "fft3d.f90"
  include "gauss_to_daub.f90"
  include "pfft3d.f90"
  include "precond_fb.f90"
  include "scaling_function.f90"
  include "common_routines.f90"

end module lib_BigDFT
