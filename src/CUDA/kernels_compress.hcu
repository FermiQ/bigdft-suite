#ifndef __kernels_compress__
#define __kernels_compress__

template<typename T>
__global__ void uncompresscoarsefine(int n1,int n2,int n3, T *psi_cf, T *psi_g,int *keys)
{

  //segment(s) treated by the group of threads
  unsigned int iseg=threadIdx.y + blockDim.y*blockIdx.x;

  //thread id
  unsigned int tid = threadIdx.x;
  //number of components (1=coarse,7=fine,0=empty)
  unsigned int ncomps=keys[4*iseg]; 

  //number of elements
  unsigned int nelems=keys[4*iseg+1]; 

  //starting point of the compressed wavefunctions
  unsigned int is=keys[4*iseg+2]-1; 

  //starting point of the uncompressed wavefunction
  unsigned int ii=keys[4*iseg+3]-1; 

  //starting point for the three coordinates
  unsigned int i1s,i2s,i3s;

  i3s=ii/(n1*n2);
  ii=ii-i3s*n1*n2;
  i2s=ii/n1;
  i1s=ii-i2s*n1;

  ii=i1s+2*n1*i2s+4*n1*n2*i3s;

  if (ncomps == 1)
    {
      if(tid < nelems)
	{
	  psi_g[ii+tid]=psi_cf[is+tid];
	}
    }
  else if (ncomps != 0) 
    {
      if(tid < nelems)
	{
	  psi_g[ii+tid+n1]                   =psi_cf[ncomps+7*(is+tid)];
	  psi_g[ii+tid+2*n1*n2]              =psi_cf[ncomps+7*(is+tid)+1];
	  psi_g[ii+tid+n1+2*n1*n2]           =psi_cf[ncomps+7*(is+tid)+2];
	  psi_g[ii+tid+4*n1*n2*n3]           =psi_cf[ncomps+7*(is+tid)+3];
	  psi_g[ii+tid+n1+4*n1*n2*n3]        =psi_cf[ncomps+7*(is+tid)+4];
	  psi_g[ii+tid+2*n1*n2+4*n1*n2*n3]   =psi_cf[ncomps+7*(is+tid)+5];
	  psi_g[ii+tid+n1+2*n1*n2+4*n1*n2*n3]=psi_cf[ncomps+7*(is+tid)+6];

	}

    }
}


template<typename T>
__global__ void compresscoarsefine(int n1,int n2,int n3, T *psi_g, T *psi_cf,int *keys)
{

  //segment(s) treated by the group of threads
  unsigned int iseg=threadIdx.y + blockDim.y*blockIdx.x;

  //thread id
  unsigned int tid = threadIdx.x;
  //number of components (1=coarse,7=fine,0=empty)
  unsigned int ncomps=keys[4*iseg]; 

  //number of elements
  unsigned int nelems=keys[4*iseg+1]; 

  //starting point of the compressed wavefunctions
  unsigned int is=keys[4*iseg+2]-1; 

  //starting point of the uncompressed wavefunction
  unsigned int ii=keys[4*iseg+3]-1; 

  //starting point for the three coordinates
  unsigned int i1s,i2s,i3s;

  i3s=ii/(n1*n2);
  ii=ii-i3s*n1*n2;
  i2s=ii/n1;
  i1s=ii-i2s*n1;

  ii=i1s+2*n1*i2s+4*n1*n2*i3s;

  if (ncomps == 1)
    {
      if(tid < nelems)
	{
	  psi_cf[is+tid]=psi_g[ii+tid];
	}
    }
  else if (ncomps != 0) 
    {
      if(tid < nelems)
	{
	  psi_cf[ncomps+7*(is+tid)]  =psi_g[ii+tid+n1]                   ;
	  psi_cf[ncomps+7*(is+tid)+1]=psi_g[ii+tid+2*n1*n2]              ;
	  psi_cf[ncomps+7*(is+tid)+2]=psi_g[ii+tid+n1+2*n1*n2]           ;
	  psi_cf[ncomps+7*(is+tid)+3]=psi_g[ii+tid+4*n1*n2*n3]           ;
	  psi_cf[ncomps+7*(is+tid)+4]=psi_g[ii+tid+n1+4*n1*n2*n3]        ;
	  psi_cf[ncomps+7*(is+tid)+5]=psi_g[ii+tid+2*n1*n2+4*n1*n2*n3]   ;
	  psi_cf[ncomps+7*(is+tid)+6]=psi_g[ii+tid+n1+2*n1*n2+4*n1*n2*n3];
	}

    }
}



#endif

