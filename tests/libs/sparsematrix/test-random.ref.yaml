  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DRIVER FOR THE CHEBYSHEV MATRIX EXPANSION
 Parallel environment:
   MPI tasks                           :  8
   OpenMP threads                      :  1
 Input parameters:
   Matrix dimension                    :  100
   Number of non-zero entries          :  10000
   Condition number                    :  50.0
   Exponent for the matrix power calculation: -1.0
 sparse matmul load balancing naive / optimized:  [  1.04,  1.04 ]
 total elements                        :  10000
 non-zero elements                     :  10000
  #segments:  100
 sparsity in %                         :  0.00
 sparse matrix multiplication initialized:  Yes
 taskgroup summary:
   number of taskgroups                :  1
   taskgroups overview:
   -  {number of tasks:  8, start / end:  [  1,  10000 ], start / end disjoint: [ 1, 
  10000]}
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Calculating mat^x
 determine eigenvalue bounds:
 -  {npl:  20, scale:  1.00E+00, bounds:  [  0.500,  1.500 ], penalty:  2.5E+04, ok: [ No, 
  Yes], exp accur:  [  1.46E-11 ]}
 -  {npl:  20, scale:  2.00E+00, bounds:  [  0.417,  1.500 ], penalty: -2.2E+04, ok: [ Yes, 
  No], exp accur:  [  3.11E-10 ]}
 -  {npl:  20, scale:  1.00E+00, bounds:  [  0.417,  1.800 ], penalty:  5.1E+03, ok: [ No, 
  Yes], exp accur:  [  3.65E-09 ]}
 -  {npl:  25, scale:  2.00E+00, bounds:  [  0.347,  1.800 ], penalty:  2.0E+02, ok: [ No, 
  Yes], exp accur:  [  3.31E-10 ]}
 -  {npl:  25, scale:  4.00E+00, bounds:  [  0.289,  1.800 ], penalty: -4.4E+05, ok: [ Yes, 
  No], exp accur:  [  4.04E-09 ]}
 -  {npl:  30, scale:  2.00E+00, bounds:  [  0.289,  2.160 ], penalty:  3.6E+01, ok: [ No, 
  Yes], exp accur:  [  6.71E-10 ]}
 -  {npl:  30, scale:  4.00E+00, bounds:  [  0.241,  2.160 ], penalty: -4.8E+05, ok: [ Yes, 
  No], exp accur:  [  7.13E-09 ]}
 -  {npl:  35, scale:  2.00E+00, bounds:  [  0.241,  2.592 ], penalty:  6.0E+00, ok: [ No, 
  Yes], exp accur:  [  2.15E-09 ]}
 -  {npl:  40, scale:  4.00E+00, bounds:  [  0.201,  2.592 ], penalty: -9.9E+05, ok: [ Yes, 
  No], exp accur:  [  1.12E-09 ]}
 -  {npl:  40, scale:  2.00E+00, bounds:  [  0.201,  3.110 ], penalty:  1.3E+00, ok: [ No, 
  Yes], exp accur:  [  9.03E-09 ]}
 -  {npl:  45, scale:  4.00E+00, bounds:  [  0.167,  3.110 ], penalty: -1.2E+05, ok: [ Yes, 
  No], exp accur:  [  6.77E-09 ]}
 -  {npl:  50, scale:  2.00E+00, bounds:  [  0.167,  3.732 ], penalty:  3.3E-01, ok: [ No, 
  Yes], exp accur:  [  5.34E-09 ]}
 -  {npl:  55, scale:  4.00E+00, bounds:  [  0.140,  3.732 ], penalty: -1.8E+01, ok: [ Yes, 
  No], exp accur:  [  6.01E-09 ]}
 -  {npl:  60, scale:  2.00E+00, bounds:  [  0.140,  4.479 ], penalty:  1.1E-01, ok: [ No, 
  Yes], exp accur:  [  6.86E-09 ]}
 -  {npl:  70, scale:  4.00E+00, bounds:  [  0.116,  4.479 ], penalty:  4.1E-04, ok: [ Yes, 
  Yes], exp accur:  [  2.09E-09 ]}
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Calculating mat^-x
 determine eigenvalue bounds:
 -  {npl:  30, scale:  4.00E+00, bounds:  [  0.116,  4.479 ], penalty:  4.2E-04, ok: [ Yes, 
  Yes], exp accur:  [  8.22E-15 ]}
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Calculating mat^x*mat^-x
 Check the deviation from unity of the operation mat^x*mat^-x:
   max_error                           :  2.617E-10
   mean_error                          :  1.864E-12
 Memory Consumption Report:
   Tot. No. of Allocations             :  957
   Tot. No. of Deallocations           :  957
   Remaining Memory (B)                :  0
   Memory occupation:
     Peak Value (MB)                   :  2.728
     for the array                     : vectors_new
     in the routine                    : chebyshev_clean
     Memory Peak of process            : 22.976 MB
 Walltime since initialization         : 00:00:14.376870276
 Max No. of dictionaries used          :  789 #( 189 still in use)
 Number of dictionary folders allocated:  1
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DRIVER FOR THE CHEBYSHEV MATRIX EXPANSION
 Parallel environment:
   MPI tasks                           :  8
   OpenMP threads                      :  1
 Input parameters:
   Matrix dimension                    :  2000
   Number of non-zero entries          :  100000
   Condition number                    :  100.0
   Exponent for the matrix power calculation: -0.5
 sparse matmul load balancing naive / optimized:  [  1.03,  1.00 ]
 total elements                        :  4000000
 non-zero elements                     :  100000
  #segments:  97455
 sparsity in %                         :  97.50
 sparse matrix multiplication initialized:  Yes
 taskgroup summary:
   number of taskgroups                :  1
   taskgroups overview:
   -  {number of tasks:  8, start / end:  [  1,  100000 ], start / end disjoint: [ 1, 
  100000]}
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Calculating mat^x
 determine eigenvalue bounds:
 -  {npl:  15, scale:  1.00E+00, bounds:  [  0.500,  1.500 ], penalty:  1.0E+04, ok: [ No, 
  Yes], exp accur:  [  1.39E-09 ]}
 -  {npl:  20, scale:  2.00E+00, bounds:  [  0.417,  1.500 ], penalty: -1.9E+04, ok: [ Yes, 
  No], exp accur:  [  3.41E-11 ]}
 -  {npl:  20, scale:  1.00E+00, bounds:  [  0.417,  1.800 ], penalty:  1.2E+04, ok: [ No, 
  Yes], exp accur:  [  4.17E-10 ]}
 -  {npl:  20, scale:  2.00E+00, bounds:  [  0.347,  1.800 ], penalty:  8.2E+02, ok: [ No, 
  Yes], exp accur:  [  3.99E-09 ]}
 -  {npl:  25, scale:  4.00E+00, bounds:  [  0.289,  1.800 ], penalty: -5.9E+05, ok: [ Yes, 
  No], exp accur:  [  3.77E-10 ]}
 -  {npl:  25, scale:  2.00E+00, bounds:  [  0.289,  2.160 ], penalty:  3.1E+02, ok: [ No, 
  Yes], exp accur:  [  3.04E-09 ]}
 -  {npl:  30, scale:  4.00E+00, bounds:  [  0.241,  2.160 ], penalty: -6.9E+05, ok: [ Yes, 
  No], exp accur:  [  6.08E-10 ]}
 -  {npl:  30, scale:  2.00E+00, bounds:  [  0.241,  2.592 ], penalty:  1.0E+02, ok: [ No, 
  Yes], exp accur:  [  4.41E-09 ]}
 -  {npl:  35, scale:  4.00E+00, bounds:  [  0.201,  2.592 ], penalty: -2.2E+05, ok: [ Yes, 
  No], exp accur:  [  1.54E-09 ]}
 -  {npl:  35, scale:  2.00E+00, bounds:  [  0.201,  3.110 ], penalty:  2.9E+01, ok: [ No, 
  Yes], exp accur:  [  9.99E-09 ]}
 -  {npl:  40, scale:  4.00E+00, bounds:  [  0.167,  3.110 ], penalty: -4.8E+04, ok: [ Yes, 
  No], exp accur:  [  5.27E-09 ]}
 -  {npl:  45, scale:  2.00E+00, bounds:  [  0.167,  3.732 ], penalty:  9.4E+00, ok: [ No, 
  Yes], exp accur:  [  3.31E-09 ]}
 -  {npl:  50, scale:  4.00E+00, bounds:  [  0.140,  3.732 ], penalty: -5.8E+02, ok: [ Yes, 
  No], exp accur:  [  2.88E-09 ]}
 -  {npl:  55, scale:  2.00E+00, bounds:  [  0.140,  4.479 ], penalty:  3.2E+00, ok: [ No, 
  Yes], exp accur:  [  2.77E-09 ]}
 -  {npl:  60, scale:  4.00E+00, bounds:  [  0.116,  4.479 ], penalty:  2.9E-01, ok: [ No, 
  Yes], exp accur:  [  3.38E-09 ]}
 -  {npl:  65, scale:  8.00E+00, bounds:  [  0.097,  4.479 ], penalty: -2.9E+05, ok: [ Yes, 
  No], exp accur:  [  4.6E-09 ]}
 -  {npl:  70, scale:  4.00E+00, bounds:  [  0.097,  5.375 ], penalty:  1.3E-01, ok: [ No, 
  Yes], exp accur:  [  6.59E-09 ]}
 -  {npl:  80, scale:  8.00E+00, bounds:  [  0.081,  5.375 ], penalty: -9.6E+05, ok: [ Yes, 
  No], exp accur:  [  3.26E-09 ]}
 -  {npl:  85, scale:  4.00E+00, bounds:  [  0.081,  6.450 ], penalty:  7.0E-02, ok: [ No, 
  Yes], exp accur:  [  6.15E-09 ]}
 -  {npl:  95, scale:  8.00E+00, bounds:  [  0.067,  6.450 ], penalty: -9.9E+04, ok: [ Yes, 
  No], exp accur:  [  4.6E-09 ]}
 -  {npl:  105, scale:  4.00E+00, bounds:  [  0.067,  7.740 ], penalty:  4.1E-02, ok: [ No, 
  Yes], exp accur:  [  3.9E-09 ]}
 -  {npl:  110, scale:  8.00E+00, bounds:  [  0.056,  7.740 ], penalty: -6.5E+02, ok: [
  Yes,  No], exp accur:  [  9.7E-09 ]}
 -  {npl:  125, scale:  4.00E+00, bounds:  [  0.056,  9.288 ], penalty:  2.6E-02, ok: [ No, 
  Yes], exp accur:  [  4.73E-09 ]}
 -  {npl:  135, scale:  8.00E+00, bounds:  [  0.047,  9.288 ], penalty:  1.7E-03, ok: [ No, 
  Yes], exp accur:  [  7.43E-09 ]}
 -  {npl:  150, scale:  1.60E+01, bounds:  [  0.039,  9.288 ], penalty: -2.3E+06, ok: [
  Yes,  No], exp accur:  [  6.17E-09 ]}
 -  {npl:  165, scale:  8.00E+00, bounds:  [  0.039,  11.145 ], penalty:  1.3E-03, ok: [
  No,  Yes], exp accur:  [  5.7E-09 ]}
 -  {npl:  180, scale:  1.60E+01, bounds:  [  0.032,  11.145 ], penalty: -3.9E+05, ok: [
  Yes,  No], exp accur:  [  6.27E-09 ]}
 -  {npl:  195, scale:  8.00E+00, bounds:  [  0.032,  13.374 ], penalty:  9.8E-04, ok: [
  Yes,  Yes], exp accur:  [  7.9E-09 ]}
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Calculating mat^-x
 determine eigenvalue bounds:
 -  {npl:  135, scale:  8.00E+00, bounds:  [  0.032,  13.374 ], penalty:  9.8E-04, ok: [
  Yes,  Yes], exp accur:  [  8.52E-09 ]}
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Calculating mat^x*mat^-x
 Check the deviation from unity of the operation mat^x*mat^-x:
   max_error                           :  1.107E-08
   mean_error                          :  4.596E-12
 Memory Consumption Report:
   Tot. No. of Allocations             :  2455
   Tot. No. of Deallocations           :  2455
   Remaining Memory (B)                :  0
   Memory occupation:
     Peak Value (MB)                   :  31.317
     for the array                     : vectors_new
     in the routine                    : chebyshev_clean
     Memory Peak of process            : 60.884 MB
 Walltime since initialization         : 00:01:05.425259201
 Max No. of dictionaries used          :  789 #( 189 still in use)
 Number of dictionary folders allocated:  1
