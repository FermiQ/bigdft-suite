---
 Code logo:
   "__________________________________ A fast and precise DFT wavelet code
   |     |     |     |     |     |
   |     |     |     |     |     |      BBBB         i       gggggg
   |_____|_____|_____|_____|_____|     B    B               g
   |     |  :  |  :  |     |     |    B     B        i     g
   |     |-0+--|-0+--|     |     |    B    B         i     g        g
   |_____|__:__|__:__|_____|_____|___ BBBBB          i     g         g
   |  :  |     |     |  :  |     |    B    B         i     g         g
   |--+0-|     |     |-0+--|     |    B     B     iiii     g         g
   |__:__|_____|_____|__:__|_____|    B     B        i      g        g
   |     |  :  |  :  |     |     |    B BBBB        i        g      g
   |     |-0+--|-0+--|     |     |    B        iiiii          gggggg
   |_____|__:__|__:__|_____|_____|__BBBBB
   |     |     |     |  :  |     |                           TTTTTTTTT
   |     |     |     |--+0-|     |  DDDDDD          FFFFF        T
   |_____|_____|_____|__:__|_____| D      D        F        TTTT T
   |     |     |     |  :  |     |D        D      F        T     T
   |     |     |     |--+0-|     |D         D     FFFF     T     T
   |_____|_____|_____|__:__|_____|D___      D     F         T    T
   |     |     |  :  |     |     |D         D     F          TTTTT
   |     |     |--+0-|     |     | D        D     F         T    T
   |_____|_____|__:__|_____|_____|          D     F        T     T
   |     |     |     |     |     |         D               T    T
   |     |     |     |     |     |   DDDDDD       F         TTTT
   |_____|_____|_____|_____|_____|______                    www.bigdft.org   "

 Reference Paper                       : The Journal of Chemical Physics 129, 014109 (2008)
 Version Number                        : 1.7.6.6
 Timestamp of this run                 : 2015-03-27 10:51:53.107
 Root process Hostname                 : athelas
 Number of MPI tasks                   :  2
 OpenMP parallelization                :  Yes
 Maximal OpenMP threads per MPI task   :  2
 MPI tasks of root process node        :  2
  #------------------------------------------------------------------ Code compiling options
 Compilation options:
   Configure arguments:
     " 'FCFLAGS=-O2 -fopenmp -g -fbounds-check -fbacktrace 
     -ffpe-trap=invalid,zero,overflow,denormal' 
     '--with-ext-linalg=-L/opt/intel/composer_xe_2013.1.117/mkl/lib/intel64 
     -L/opt/intel/composer_xe_2013.1.117/compiler/lib/intel64 -lmkl_rt -liomp5 -lm' 
     'CFLAGS=-O2 -fopenmp' 'CC=mpicc.openmpi' 'CXX=mpicxx.openmpi' 'FC=mpif90.openmpi' 
     'F77=mpif77.openmpi' '--with-blas=no' '--with-lapack=no'"

   Compilers (CC, FC, CXX)             :  [ mpicc.openmpi, mpif90.openmpi, mpicxx.openmpi ]
   Compiler flags:
     CFLAGS                            : -O2 -fopenmp
                                        
     FCFLAGS:
       -O2 -fopenmp -g -fbounds-check -fbacktrace -ffpe-trap=invalid,zero,overflow,denormal
     CXXFLAGS                          : -g -O2
  #WARNING: geopt/betax is not allowed in this context.
  #------------------------------------------------------------------------ Input parameters
 radical                               : LENOSKY-ab6md
 outdir                                : ./
 logfile                               : Yes
 run_from_files                        : Yes
 mode:
   method                              : lensib # Run method of BigDFT call
   mm_paramset                         : default # Name of the hard-coded parameter set. Must be compatible to the chosen force field.
   mm_paramfile                        : none #   name of parameter file
 geopt:
   method                              : AB6MD #  Geometry optimisation method
   ncount_cluster_x                    : 500 #    Maximum number of force evaluations
   frac_fluct                          : 0.0 #    Fraction of force fluctuations. Stop if fmax < forces_fluct*frac_fluct
   forcemax                            : 1.0E-4 # Max forces criterion when stop
   betax                               : 6.0
   dtion                               : 2.0 #    Time step - Atomic Units (20.670689 AU=0.5 fs)
   randdis                             : 0. #     Random displacement amplitude
   ionmov                              : 6 #      Movement ion method
   mditemp                             : 300. #   Temperature of molecular dynamics
 posinp:
   units                               : angstroem
   cell: [ 25.0,  25.0,  25.0]
   positions:
   - Si: [15.83633899688721, 12.06140232086182, 13.07706928253174]
   - Si: [11.97898483276367, 14.41138648986816, 10.36060810089111]
   - Si: [11.01325607299805, 11.72996997833252, 10.34267807006836]
   - Si: [12.54591369628906, 10.00936603546143, 11.35790729522705]
   - Si: [10.69509696960449, 14.18153667449951, 14.28646945953369]
   - Si: [10.63320732116699, 15.3451042175293, 12.44081783294678]
   - Si: [9.105777740478516, 12.44273376464844, 12.55424976348877]
   - Si: [15.20534133911133, 14.0150728225708, 11.67320537567139]
   - Si: [11.72766780853272, 9.400177955627441, 13.49430084228516]
   - Si: [10.28946876525879, 10.54689121246338, 12.24635124206543]
   - Si: [9.765847206115723, 13.84446430206299, 10.8253116607666]
   - Si: [14.64565372467041, 13.01049041748047, 14.90087795257568]
   - Si: [13.32097721099854, 12.45216846466064, 10.74146461486816]
   - Si: [13.50776290893555, 10.82381153106689, 15.09267330169678]
   - Si: [13.01336288452148, 14.69769096374512, 14.16423511505127]
   - Si: [12.72242832183838, 12.58404636383057, 13.24282169342041]
   - Si: [13.17438411712646, 15.58343124389648, 12.0091438293457]
   - Si: [15.35318851470947, 11.26613235473633, 10.4263744354248]
   - Si: [14.78244495391846, 10.02921199798584, 12.35942268371582]
   - Si: [10.68289566040039, 11.56491088867188, 14.40401840209961]
   properties:
     format                            : ascii
     source                            : LENOSKY-ab6md
 dft:
   hgrids: [0.45, 0.45, 0.45] #                   Grid spacing in the three directions (bohr)
   rmult: [5., 8.] #                              c(f)rmult*radii_cf(:,1(2))=coarse(fine) atom-based radius
   ixc                                 : 1 #      Exchange-correlation parameter (LDA=1,PBE=11)
   qcharge                             : 0 #      Charge of the system. Can be integer or real.
   elecfield: [0., 0., 0.] #                      Electric field (Ex,Ey,Ez)
   nspin                               : 1 #      Spin polarization treatment
   mpol                                : 0 #      Total magnetic moment
   gnrm_cv                             : 1.e-4 #  convergence criterion gradient
   itermax                             : 50 #     Max. iterations of wfn. opt. steps
   itermin                             : 0 #      Min. iterations of wfn. opt. steps
   nrepmax                             : 1 #      Max. number of re-diag. runs
   ncong                               : 6 #      No. of CG it. for preconditioning eq.
   idsx                                : 6 #      Wfn. diis history
   dispersion                          : 0 #      Dispersion correction potential (values 1,2,3,4,5), 0=none
   inputpsiid                          : 0 #      Input guess wavefunctions
   output_wf                           : 0 #      Output of the support functions
   output_denspot                      : 0 #      Output of the density or the potential
   rbuf                                : 0. #     Length of the tail (AU)
   ncongt                              : 30 #     No. of tail CG iterations
   norbv                               : 0 #      Davidson subspace dimension (No. virtual orbitals)
   nvirt                               : 0 #      No. of virtual orbs
   nplot                               : 0 #      No. of plotted orbs
   disablesym                          : No #     Disable the symmetry detection
 perf:
   debug                               : No #     Debug option
   fftcache                            : 8192 #   Cache size for the FFT
   accel                               : NO #     Acceleration (hardware)
   ocl_platform                        : ~ #      Chosen OCL platform
   ocl_devices                         : ~ #      Chosen OCL devices
   blas                                : No #     CUBLAS acceleration
   projrad                             : 15. #    Radius of the projector as a function of the maxrad
   exctxpar                            : OP2P #   Exact exchange parallelisation scheme
   ig_diag                             : Yes #    Input guess (T=Direct, F=Iterative) diag. of Ham.
   ig_norbp                            : 5 #      Input guess Orbitals per process for iterative diag.
   ig_blocks: [300, 800] #                        Input guess Block sizes for orthonormalisation
   ig_tol                              : 1.0e-4 # Input guess Tolerance criterion
   methortho                           : 0 #      Orthogonalisation
   rho_commun                          : DEF #    Density communication scheme (DBL, RSC, MIX)
   psolver_groupsize                   : 0 #      Size of Poisson Solver taskgroups (0=nproc)
   psolver_accel                       : 0 #      Acceleration of the Poisson Solver (0=none, 1=CUDA)
   unblock_comms                       : OFF #    Overlap Communications of fields (OFF,DEN,POT)
   linear                              : OFF #    Linear Input Guess approach
   tolsym                              : 1.0e-8 # Tolerance for symmetry detection
   signaling                           : No #     Expose calculation results on Network
   signaltimeout                       : 0 #      Time out on startup for signal connection (in seconds)
   domain                              : ~ #      Domain to add to the hostname to find the IP
   inguess_geopt                       : 0 #      Input guess to be used during the optimization
   store_index                         : Yes #    Store indices or recalculate them for linear scaling
   verbosity                           : 2 #      Verbosity of the output
   psp_onfly                           : Yes #    Calculate pseudopotential projectors on the fly
   multipole_preserving                : No #     (EXPERIMENTAL) Preserve the multipole moment of the ionic density
   mp_isf                              : 16 #     (EXPERIMENTAL) Interpolating scalig function order for the multipole preserving
   pdsyev_blocksize                    : -8 #     SCALAPACK linear scaling blocksize
   pdgemm_blocksize                    : -8 #     SCALAPACK linear scaling blocksize
   maxproc_pdsyev                      : 4 #      SCALAPACK linear scaling max num procs
   maxproc_pdgemm                      : 4 #      SCALAPACK linear scaling max num procs
   ef_interpol_det                     : 1.e-12 # FOE max determinant of cubic interpolation matrix
   ef_interpol_chargediff              : 1.0 #    FOE max charge difference for interpolation
   mixing_after_inputguess             : 1 #      Mixing step after linear input gues
   iterative_orthogonalization         : No #     Iterative_orthogonalization for input guess orbitals
   check_sumrho                        : 2 #      Enables linear sumrho check
   check_overlap                       : 2 #      Enables linear overlap check
   experimental_mode                   : No #     Activate the experimental mode in linear scaling
   write_orbitals                      : 0 #      Linear scaling write KS orbitals for cubic restart (might take lot of disk space!)
   explicit_locregcenters              : No #     Linear scaling explicitely specify localization centers
   calculate_KS_residue                : Yes #    Linear scaling calculate Kohn-Sham residue
   intermediate_forces                 : No #     Linear scaling calculate intermediate forces
   kappa_conv                          : 0.1 #    Exit kappa for extended input guess (experimental mode)
   evbounds_nsatur                     : 3 #      Number of FOE cycles before the eigenvalue bounds are shrinked (linear)
   evboundsshrink_nsatur               : 4 #      maximal number of unsuccessful eigenvalue bounds shrinkings
    #                                              purification, 1 FOE, 2 renormalization)
   calculate_gap                       : No #     linear scaling calculate the HOMO LUMO gap
   loewdin_charge_analysis             : No #     linear scaling perform a Loewdin charge analysis at the end of the calculation
   check_matrix_compression            : Yes #    linear scaling perform a check of the matrix compression routines
   correction_co_contra                : Yes #    linear scaling correction covariant / contravariant gradient
   fscale_lowerbound                   : 5.e-3 #  linear scaling lower bound for the error function decay length
   fscale_upperbound                   : 5.e-2 #  linear scaling upper bound for the error function decay length
   FOE_restart                         : 0 #      Restart method to be used for the FOE method
   imethod_overlap                     : 1 #      method to calculate the overlap matrices (1=old, 2=new)
   enable_matrix_taskgroups            : True #   enable the matrix taskgroups
   hamapp_radius_incr                  : 8 #      radius enlargement for the Hamiltonian application (in grid points)
   adjust_kernel_iterations            : True #   enable the addaptive ajustment of the number of kernel iterations
   wf_extent_analysis                  : False #  perform an analysis of the extent of the support functions (and possibly KS orbitals)
 kpt:
   method                              : manual # K-point sampling method
   kpt: #                                         Kpt coordinates
   -  [0., 0., 0.]
   wkpt: [1.] #                                   Kpt weights
   bands                               : No #     For doing band structure calculation
 mix:
   iscf                                : 0 #      Mixing parameters
   itrpmax                             : 1 #      Maximum number of diagonalisation iterations
   rpnrm_cv                            : 1e-4 #   Stop criterion on the residue of potential or density
   norbsempty                          : 0 #      No. of additional bands
   tel                                 : 0. #     Electronic temperature
   occopt                              : 1 #      Smearing method
   alphamix                            : 0. #     Multiplying factors for the mixing
   alphadiis                           : 2. #     Multiplying factors for the electronic DIIS
 sic:
   sic_approach                        : none #   SIC (self-interaction correction) method
   sic_alpha                           : 0. #     SIC downscaling parameter
 tddft:
   tddft_approach                      : none #   Time-Dependent DFT method
 lin_general:
   hybrid                              : No #     activate the hybrid mode; if activated, only the low accuracy values will be relevant
   nit: [100, 100] #                              number of iteration with low/high accuracy
   rpnrm_cv: [1.e-12, 1.e-12] #                   convergence criterion for low/high accuracy
   conf_damping                        : -0.5 #   how the confinement should be decreased, only relevant for hybrid mode; negative -> 
    #                                              automatic
   taylor_order                        : 0 #      order of the Taylor approximation; 0 -> exact
   max_inversion_error                 : 1.d0 #   linear scaling maximal error of the Taylor approximations to calculate the inverse of 
    #                                              the overlap matrix
   output_wf                           : 0 #      output basis functions; 0 no output, 1 formatted output, 2 Fortran bin, 3 ETSF
   calc_dipole                         : No #     calculate dipole
   subspace_diag                       : No #     diagonalization at the end
   extra_states                        : 0 #      extra states to optimize (dmin only)
 lin_basis:
   nit: [4, 5] #                                  maximal number of iterations in the optimization of the 
    #                                              support functions
   idsx: [6, 6] #                                 DIIS history for optimization of the support functions 
    #                                              (low/high accuracy); 0 -> SD
   gnrm_cv: [1.e-2, 1.e-4] #                      convergence criterion for the optimization of the support functions 
    #                                              (low/high accuracy)
   deltae_cv                           : 1.e-4 #  total relative energy difference to stop the optimization ('experimental_mode' only)
   gnrm_dyn                            : 1.e-4 #  dynamic convergence criterion ('experimental_mode' only)
   min_gnrm_for_dynamic                : 1.e-3 #  minimal gnrm to active the dynamic gnrm criterion
   alpha_diis                          : 1.0 #    multiplicator for DIIS
   alpha_sd                            : 1.0 #    initial step size for SD
   nstep_prec                          : 5 #      number of iterations in the preconditioner
   fix_basis                           : 1.e-10 # fix the support functions if the density change is below this threshold
   correction_orthoconstraint          : 1 #      correction for the slight non-orthonormality in the orthoconstraint
 lin_kernel:
   nstep: [1, 1] #                                number of steps taken when updating the coefficients via 
    #                                              direct minimization for each iteration of 
    #                                              the density kernel loop
   nit: [5, 5] #                                  number of iterations in the (self-consistent) 
    #                                              optimization of the density kernel
   idsx_coeff: [0, 0] #                           DIIS history for direct mininimization
   idsx: [0, 0] #                                 mixing method; 0 -> linear mixing, >=1 -> Pulay mixing
   alphamix: [0.5, 0.5] #                         mixing parameter (low/high accuracy)
   gnrm_cv_coeff: [1.e-5, 1.e-5] #                convergence criterion on the gradient for direct minimization
   rpnrm_cv: [1.e-10, 1.e-10] #                   convergence criterion (change in density/potential) for the kernel 
    #                                              optimization
   linear_method                       : DIAG #   method to optimize the density kernel
   mixing_method                       : DEN #    quantity to be mixed
   alpha_sd_coeff                      : 0.2 #    initial step size for SD for direct minimization
   alpha_fit_coeff                     : No #     update the SD step size by fitting a quadratic polynomial to the energy along the 
    #                                              direction of the gradient during direct 
    #                                              mininimization.
   eval_range_foe: [-0.5, 0.5] #                  lower and upper bound of the eigenvalue spectrum, will be adjusted 
    #                                              automatically if chosen unproperly
   fscale_foe                          : 2.e-2 #  decay length of the error function
 lin_basis_params:
   nbasis                              : 4 #      number of support functions per atom
   ao_confinement                      : 8.3e-3 # prefactor for the input guess confining potential
   confinement: [8.3e-3, 0.0] #                   prefactor for the confining potential (low/high accuracy)
   rloc: [7.0, 7.0] #                             localization radius for the support functions
   rloc_kernel                         : 9.0 #    localization radius for the density kernel
   rloc_kernel_foe                     : 14.0 #   cutoff radius for the FOE matrix vector multiplications
 psppar.Si:
   Pseudopotential type                : HGH-K
   Atomic number                       : 14
   No. of Electrons                    : 4
   Pseudopotential XC                  : 1
   Local Pseudo Potential (HGH convention):
     Rloc                              : 0.44
     Coefficients (c1 .. c4): [-7.33610297, 0.0, 0.0, 0.0]
   NonLocal PSP Parameters:
   - Channel (l)                       : 0
     Rloc                              : 0.42273813
     h_ij terms: [5.90692831, 3.25819622, 0.0, -1.26189397, 0.0, 0.0]
   - Channel (l)                       : 1
     Rloc                              : 0.48427842
     h_ij terms: [2.72701346, 0.0, 0.0, 0.0, 0.0, 0.0]
   Source                              : Hard-Coded
   Radii of active regions (AU):
     Coarse                            : 1.806025343502968
     Fine                              : 0.42273813
     Coarse PSP                        : 0.9080220375
     Source                            : Hard-Coded
  #--------------------------------------------------------------------------------------- |
 Data Writing directory                : ./data-LENOSKY-ab6md/
  #--------------------------------------- Input Atomic System (file: __not_a_value__.ascii)
 Atomic System Properties:
   Number of atomic types              :  1
   Number of atoms                     :  20
   Types of atoms                      :  [ Si ]
   Boundary Conditions                 : Periodic #Code: P
   Box Sizes (AU)                      :  [  4.72432E+01,  4.72432E+01,  4.72432E+01 ]
   Number of Symmetries                :  1
   Space group                         : P 1
  #---------------------- Geometry optimization Input Parameters (file: LENOSKY-ab6md.geopt)
 Geometry Optimization Parameters:
   Maximum steps                       :  500
   Algorithm                           : AB6MD
   Random atomic displacement          :  0.0E+00
   Fluctuation in forces               :  0.0E+00
   Maximum in forces                   :  1.0E-04
   Steepest descent step               :  6.0E+00
 Molecular Dynamics Parameters:
   ionmov                              :  6
   dtion                               :  2.
  #------------------- K points description (Reduced and Brillouin zone coordinates, Weight)
 K points:
 -  {Rc:  [  0.0000,  0.0000,  0.0000 ], Bz:  [  0.0000,  0.0000,  0.0000 ], Wgt:  1.0000} # 0001
 Material acceleration                 :  No #iproc=0
 Initializing LENOSKY_SI_BULK_RUN_MODE:
 - LENOSKY_SI_BULK_RUN_MODE: {}
   Energy (Hartree)                    : -2.52891298656997110E+00
   Wavefunction Optimization Finished, exit signal:  0
    #----------------------------------------------------- Geometry minimization using AB6MD
   Begin of minimization using         : AB6MD
   ENTERING Molecular Dynamics (ABINIT implementation):  0
   SCFloop API, call force calculation step:  1
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  2
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  3
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  4
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  5
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  6
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  7
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  8
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  9
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  10
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  11
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  12
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  13
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  14
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  15
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  16
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  17
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  18
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  19
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  20
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  21
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  22
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  23
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  24
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  25
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  26
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  27
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  28
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  29
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  30
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  31
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  32
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  33
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  34
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  35
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  36
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  37
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  38
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  39
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  40
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  41
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  42
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  43
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  44
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  45
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  46
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  47
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  48
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  49
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  50
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  51
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  52
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  53
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  54
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  55
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  56
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  57
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  58
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  59
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  60
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  61
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  62
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  63
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  64
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  65
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  66
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  67
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  68
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  69
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  70
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  71
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  72
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  73
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  74
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  75
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  76
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  77
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  78
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  79
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  80
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  81
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  82
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  83
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  84
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  85
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  86
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  87
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  88
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  89
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  90
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  91
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  92
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  93
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  94
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  95
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  96
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  97
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  98
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  99
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  100
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  101
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  102
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  103
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  104
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  105
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  106
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  107
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  108
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  109
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  110
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  111
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  112
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  113
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  114
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  115
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  116
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  117
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  118
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  119
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  120
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  121
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  122
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  123
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  124
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  125
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  126
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  127
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  128
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  129
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  130
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  131
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  132
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  133
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  134
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  135
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  136
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  137
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  138
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  139
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  140
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  141
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  142
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  143
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  144
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  145
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  146
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  147
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  148
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  149
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  150
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  151
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  152
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  153
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  154
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  155
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  156
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  157
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  158
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  159
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  160
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  161
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  162
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  163
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  164
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  165
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  166
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  167
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  168
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  169
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  170
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  171
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  172
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  173
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  174
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  175
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  176
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  177
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  178
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  179
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  180
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  181
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  182
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  183
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  184
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  185
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  186
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  187
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  188
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  189
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  190
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  191
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  192
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  193
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  194
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  195
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  196
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  197
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  198
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  199
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  200
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  201
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  202
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  203
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  204
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  205
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  206
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  207
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  208
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  209
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  210
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  211
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  212
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  213
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  214
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  215
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  216
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  217
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  218
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  219
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  220
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  221
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  222
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  223
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  224
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  225
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  226
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  227
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  228
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  229
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  230
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  231
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  232
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  233
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  234
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  235
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  236
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  237
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  238
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  239
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  240
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  241
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  242
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  243
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  244
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  245
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  246
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  247
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  248
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  249
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  250
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  251
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  252
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  253
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  254
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  255
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  256
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  257
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  258
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  259
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  260
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  261
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  262
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  263
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  264
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  265
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  266
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  267
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  268
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  269
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  270
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  271
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  272
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  273
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  274
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  275
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  276
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  277
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  278
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  279
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  280
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  281
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  282
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  283
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  284
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  285
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  286
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  287
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  288
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  289
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  290
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  291
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  292
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  293
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  294
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  295
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  296
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  297
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  298
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  299
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  300
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  301
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  302
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  303
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  304
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  305
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  306
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  307
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  308
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  309
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  310
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  311
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  312
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  313
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  314
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  315
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  316
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  317
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  318
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  319
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  320
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  321
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  322
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  323
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  324
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  325
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  326
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  327
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  328
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  329
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  330
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  331
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  332
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  333
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  334
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  335
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  336
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  337
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  338
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  339
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  340
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  341
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  342
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  343
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  344
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  345
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  346
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  347
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  348
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  349
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  350
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  351
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  352
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  353
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  354
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  355
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  356
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  357
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  358
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  359
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  360
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  361
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  362
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  363
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  364
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  365
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  366
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  367
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  368
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  369
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  370
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  371
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  372
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  373
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  374
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  375
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  376
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  377
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  378
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  379
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  380
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  381
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  382
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  383
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  384
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  385
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  386
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  387
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  388
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  389
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  390
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  391
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  392
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  393
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  394
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  395
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  396
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  397
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  398
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  399
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  400
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  401
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  402
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  403
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  404
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  405
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  406
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  407
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  408
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  409
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  410
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  411
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  412
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  413
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  414
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  415
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  416
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  417
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  418
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  419
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  420
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  421
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  422
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  423
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  424
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  425
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  426
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  427
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  428
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  429
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  430
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  431
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  432
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  433
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  434
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  435
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  436
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  437
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  438
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  439
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  440
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  441
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  442
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  443
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  444
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  445
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  446
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  447
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  448
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  449
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  450
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  451
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  452
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  453
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  454
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  455
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  456
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  457
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  458
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  459
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  460
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  461
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  462
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  463
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  464
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  465
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  466
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  467
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  468
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  469
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  470
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  471
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  472
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  473
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  474
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  475
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  476
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  477
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  478
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  479
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  480
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  481
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  482
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  483
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  484
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  485
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  486
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  487
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  488
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  489
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  490
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  491
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  492
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  493
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  494
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  495
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  496
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  497
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  498
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  499
 - LENOSKY_SI_BULK_RUN_MODE: {}
   SCFloop API, call force calculation step:  500
 - LENOSKY_SI_BULK_RUN_MODE: {}
   End of minimization using           : AB6MD
 Memory Consumption Report:
   Tot. No. of Allocations             :  2563
   Tot. No. of Deallocations           :  2563
   Remaining Memory (B)                :  0
   Memory occupation:
     Peak Value (MB)                   :  0.560
     for the array                     : array_diff
     in the routine                    : Main_program
     Memory Peak of process            : 22.520 MB
 Max No. of dictionaries used          :  3368 #( 860 still in use)
 Number of dictionary folders allocated:  1
  #-------------------------------- Warnings obtained during the run, check their relevance!
 WARNINGS:
 - geopt/betax is not allowed in this context.
